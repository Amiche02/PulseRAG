# Stage 1: Build
FROM python:3.11-slim AS builder

# Environment variables
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    git \
    curl \
    libgl1-mesa-glx \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements file from parent directory
COPY ../env/requirements.cpu.txt /app/

# Install Python dependencies
RUN pip install --upgrade pip && pip install --no-cache-dir -r /app/requirements.cpu.txt

# Install SpaCy models
RUN python -m spacy download en_core_web_sm && \
    python -m spacy download fr_core_news_sm && \
    python -m spacy download it_core_news_sm

# Copy application code (excluding unnecessary files due to .dockerignore)
COPY .. /app

# Clean up build artifacts
RUN find . -type d -name '__pycache__' -exec rm -r {} + && \
    rm -rf /root/.cache

# Stage 2: Runtime
FROM python:3.11-slim

# Environment variables
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgl1-mesa-glx \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy the built application code from the builder stage
COPY --from=builder /app /app

# Clean up any remaining build artifacts
RUN find . -type d -name '__pycache__' -exec rm -r {} + && \
    rm -rf /root/.cache

# Expose application port
EXPOSE 3000

# Define the command to run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "3000"]
