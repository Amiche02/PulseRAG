# Stage 1: Build
FROM nvidia/cuda:12.4.0-runtime-ubuntu22.04 AS builder

# Environment variables
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.11 \
    python3.11-venv \
    python3-pip \
    git \
    curl \
    libgl1-mesa-glx \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Configure Python 3.11 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

# Set working directory
WORKDIR /app

# Copy requirements file from parent directory
RUN pip install torch==2.5.0 torchvision==0.20.0 torchaudio==2.5.0 --index-url https://download.pytorch.org/whl/cu124
COPY ../env/requirements.gpu.txt /app/

# Install Python dependencies (with CUDA support)
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r /app/requirements.gpu.txt --extra-index-url https://download.pytorch.org/whl/cu124

# Install SpaCy models
RUN python -m spacy download en_core_web_sm && \
    python -m spacy download fr_core_news_sm && \
    python -m spacy download it_core_news_sm

# Copy application code (excluding unnecessary files due to .dockerignore)
COPY .. /app

# Clean up build artifacts
RUN find . -type d -name '__pycache__' -exec rm -r {} + && \
    rm -rf /root/.cache

# Stage 2: Runtime
FROM nvidia/cuda:12.4.0-runtime-ubuntu22.04

# Environment variables
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgl1-mesa-glx \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy the built application code from the builder stage
COPY --from=builder /app /app

# Clean up any remaining build artifacts
RUN find . -type d -name '__pycache__' -exec rm -r {} + && \
    rm -rf /root/.cache

# Expose application port
EXPOSE 3000

# Define the command to run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "3000"]
